<?xml version="1.0" ?><interfacedef loc="41:/opt/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Ram.nc" nicename="tos.chips.cc2420.interfaces.CC2420Ram" qname="CC2420Ram">
      <documentation loc="32:/opt/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <short>
 HAL abstraction for accessing theRAM of a ChipCon CC2420 radio.</short>
        <long>
 HAL abstraction for accessing theRAM of a ChipCon CC2420 radio.

 @author Jonathan Hui &lt;jhui@archrock.com&gt;
 @version $Revision: 1.2 $ $Date: 2008/06/03 04:43:03 $
</long>
      </documentation>
      <function command="" loc="52:/opt/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Ram.nc" name="read" provided="0" ref="0x7d453780">
        <documentation loc="43:/opt/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Ram.nc">
          <short>
 Read data from a RAM.</short>
          <long>
 Read data from a RAM. This operation is sychronous.

 @param offset within the field.
 @param data a pointer to the receive buffer.
 @param length number of bytes to read.
 @return status byte returned when sending the last byte
 of the SPI transaction.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.chips.cc2420.interfaces.CC2420Ram" qname="CC2420Ram"/>
        <type-function alignment="I:1" size="I:1">
          <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7d9667e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
              <typename><typedef-ref name="uint8_t" ref="0x7ee60548"/></typename>
            </type-int>
            <type-pointer alignment="I:2" size="I:2">
              <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
                <typename><typedef-ref name="uint8_t" ref="0x7ee60548"/></typename>
              </type-int>
            </type-pointer>
            <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
              <typename><typedef-ref name="uint8_t" ref="0x7ee60548"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable loc="52:/opt/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Ram.nc" name="offset" ref="0x7d458f18">
            <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
              <typename><typedef-ref name="uint8_t" ref="0x7ee60548"/></typename>
            </type-int>
          </variable>
          <variable loc="52:/opt/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Ram.nc" name="data" ref="0x7d453418">
            <type-pointer alignment="I:2" size="I:2">
              <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
                <typename><typedef-ref name="uint8_t" ref="0x7ee60548"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable loc="52:/opt/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Ram.nc" name="length" ref="0x7d453618">
            <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
              <typename><typedef-ref name="uint8_t" ref="0x7ee60548"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" loc="63:/opt/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Ram.nc" name="write" provided="0" ref="0x7d4525b8">
        <documentation loc="54:/opt/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Ram.nc">
          <short>
 Write data to RAM.</short>
          <long>
 Write data to RAM. This operation is sychronous.

 @param offset within the field.
 @param data a pointer to the send buffer.
 @param length number of bytes to write.
 @return status byte returned when sending the last address byte
 of the SPI transaction.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.chips.cc2420.interfaces.CC2420Ram" qname="CC2420Ram"/>
        <type-function alignment="I:1" size="I:1">
          <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7d9667e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
              <typename><typedef-ref name="uint8_t" ref="0x7ee60548"/></typename>
            </type-int>
            <type-pointer alignment="I:2" size="I:2">
              <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
                <typename><typedef-ref name="uint8_t" ref="0x7ee60548"/></typename>
              </type-int>
            </type-pointer>
            <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
              <typename><typedef-ref name="uint8_t" ref="0x7ee60548"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable loc="63:/opt/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Ram.nc" name="offset" ref="0x7d453d28">
            <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
              <typename><typedef-ref name="uint8_t" ref="0x7ee60548"/></typename>
            </type-int>
          </variable>
          <variable loc="63:/opt/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Ram.nc" name="data" ref="0x7d452250">
            <type-pointer alignment="I:2" size="I:2">
              <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
                <typename><typedef-ref name="uint8_t" ref="0x7ee60548"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable loc="63:/opt/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Ram.nc" name="length" ref="0x7d452450">
            <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
              <typename><typedef-ref name="uint8_t" ref="0x7ee60548"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>